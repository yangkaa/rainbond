// RAINBOND, Application Management Platform
// Copyright (C) 2014-2021 Goodrain Co., Ltd.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version. For any non-GPL usage of Rainbond,
// one or multiple Commercial Licenses authorized by Goodrain Co., Ltd.
// must be obtained first.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/goodrain/rainbond/pkg/apis/rainbond/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RBDAbilityLister helps list RBDAbilities.
// All objects returned here must be treated as read-only.
type RBDAbilityLister interface {
	// List lists all RBDAbilities in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RBDAbility, err error)
	// RBDAbilities returns an object that can list and get RBDAbilities.
	RBDAbilities(namespace string) RBDAbilityNamespaceLister
	RBDAbilityListerExpansion
}

// rBDAbilityLister implements the RBDAbilityLister interface.
type rBDAbilityLister struct {
	indexer cache.Indexer
}

// NewRBDAbilityLister returns a new RBDAbilityLister.
func NewRBDAbilityLister(indexer cache.Indexer) RBDAbilityLister {
	return &rBDAbilityLister{indexer: indexer}
}

// List lists all RBDAbilities in the indexer.
func (s *rBDAbilityLister) List(selector labels.Selector) (ret []*v1alpha1.RBDAbility, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RBDAbility))
	})
	return ret, err
}

// RBDAbilities returns an object that can list and get RBDAbilities.
func (s *rBDAbilityLister) RBDAbilities(namespace string) RBDAbilityNamespaceLister {
	return rBDAbilityNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RBDAbilityNamespaceLister helps list and get RBDAbilities.
// All objects returned here must be treated as read-only.
type RBDAbilityNamespaceLister interface {
	// List lists all RBDAbilities in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RBDAbility, err error)
	// Get retrieves the RBDAbility from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RBDAbility, error)
	RBDAbilityNamespaceListerExpansion
}

// rBDAbilityNamespaceLister implements the RBDAbilityNamespaceLister
// interface.
type rBDAbilityNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RBDAbilities in the indexer for a given namespace.
func (s rBDAbilityNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RBDAbility, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RBDAbility))
	})
	return ret, err
}

// Get retrieves the RBDAbility from the indexer for a given namespace and name.
func (s rBDAbilityNamespaceLister) Get(name string) (*v1alpha1.RBDAbility, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("rbdability"), name)
	}
	return obj.(*v1alpha1.RBDAbility), nil
}
